name: CICD Pipeline 

on:
  push:
    branches: [ "main" ]

jobs:
  compile:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: |
        sudo apt update -y
        sudo apt install openjdk-17-jdk -y
        mvn compile

  security-check:
    runs-on: self-hosted
    needs: compile

    steps:
    - uses: actions/checkout@v4
    - name: Trivy Installation
      run: |
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update -y
        sudo apt-get install -y trivy


    - name: Run Trivy vulnerability scanner
      run: trivy fs --format table -o fs-report.json .

    ## - name: Gitleaks installation on self-hosted ubuntu server
    #   run: sudo apt install gitleaks -y
    # - name: gitleaks scan.
    #   run: gitleaks detect source . -r gitleaks-report.json. 

  unit-test:
    runs-on: self-hosted
    needs: security-check

    steps:
    - name: Clean SonarScanner directory
      run: |
        docker system prune -af
        sudo rm -rf ~/actions-runner/_work/_temp/*
        sudo docker system prune -af --volumes
        sudo rm -rf ~/actions-runner/_diag/*
        sudo rm -rf /usr/share/donet /etc/mysql /etc/php
        sudo apt-get clean -y
        sudo apt-get autoremove -y
        sudo apt-get autoclean -y
        sudo apt-get update -y
        sudo rm -rf $"AGENT_TOOLSDIRECTORY"
    - uses: actions/checkout@v4
    - name: Clean SonarScanner directory
      run: |
        docker system prune -af
        sudo rm -rf ~/actions-runner/_work/_temp/*
        sudo docker system prune -af --volumes
        sudo rm -rf ~/actions-runner/_diag/*
        sudo rm -rf /usr/share/donet /etc/mysql /etc/php
        sudo apt-get clean -y
        sudo apt-get autoremove -y
        sudo apt-get autoclean -y
        sudo apt-get update -y
        sudo rm -rf $"AGENT_TOOLSDIRECTORY"
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Unit Test Cases
      run: |
        mvn test

  Build-project-and-sonarscan:
    runs-on: self-hosted
    needs: unit-test

    steps:
    - name: Clean SonarScanner directory
      run: |
        docker system prune -af --volumes
        sudo rm -rf ~/actions-runner/_work/_temp/*
        sudo docker system prune -af
        sudo rm -rf ~/actions-runner/_diag/*
        sudo apt-get clean -y
        sudo apt-get autoremove -y
        sudo apt-get autoclean -y
        rm -rf /home/runner/work/_temp/sonar-scanner-cli-6.2.1.4610-Linux-X64
        sudo dpkg -l 'linux-image*' | grep '^ii'
        sudo truncate -s 0 /var/log/*.log
        sudo journalctl --vacuum-time=7d
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo apt update -y
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: |
          mvn package
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar

    - uses: actions/checkout@v4
    - name: Checking out
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Clean SonarScanner directory
      run: |
        docker system prune -af --volumes
        sudo rm -rf ~/actions-runner/_work/_temp/*
        sudo docker system prune -af
        sudo rm -rf ~/actions-runner/_diag/*
        sudo apt clean -y
        sudo apt autoremove -y
        sudo apt autoclean -y
        rm -rf /home/runner/work/_temp/sonar-scanner-cli-6.2.1.4610-Linux-X64
        sudo dpkg -l 'linux-image*' | grep '^ii'
        sudo truncate -s 0 /var/log/*.log
        sudo journalctl --vacuum-time=7d
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo apt update -y

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.2.0
      # uses: kitabisa/sonarqube-action@v1.2.0
      with:
        args: >
          -Dsonar.exclusions=**/*.html
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        pollingTimeoutSec: 600
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

    
  Build-image:
    runs-on: self-hosted
    needs: Build-project-and-sonarscan
    steps:
    - uses: actions/checkout@v4
    - name: Download JAR artifacts from build
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: app
    - name: List downloaded JARs
      run: ls -lh app
    - name: Move JAR to root for Docker build
      run: |
        mv app/*.jar .

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
          context: .
          file: ./Dockerfile
          push: true
          tags: divineking/bankapp:latest

  deploy_to_kubernetes:
    runs-on: self-hosted
    needs: Build-image
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest
    - name: Configure kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.EKS_KUBECONFIG }}" > $HOME/.kube/config
    - name: Deploy to EKS
      run: |
        kubectl apply -f ds.yml